# -*- coding: utf-8 -*-
from django.shortcuts import get_object_or_404, render, redirect
from django.http import HttpResponse
from django.template import loader

from .forms import DocumentForm, Docutres
from .utils.sample_convertion import *
from .utils.stats_calculation import *
import time

from django.conf import settings
from django.core.files.storage import FileSystemStorage

from .models import *


from django.core.files.storage import FileSystemStorage
import re

####### Import libraries for static files
#from django.shortcuts import render_to_response
#from django.shortcuts import RequestContext
# import pdb; pdb.set_trace()


def index(request):
    #latest_question_list = Question.objects.order_by('-pub_date')[:5]
    #context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html')

def get_sample_file (request):
    if request.method == 'POST' and (request.POST['action']=='uploadFile'):
        ### First step in collecting data from the NextSeq run. Sample Sheet and experiment name are required
        
        get_user_names={}
        projects=[]
        run_name=request.POST['runname']
        myfile = request.FILES['myfile']
        ## check that runName is not already used in the database. Error page is showed if runName is already  defined
        if (RunProcess.objects.filter(runName = run_name)).exists():
            return render (request,'polls/error_page.html', {'content':['Run Name is already used. ','Run Name must be unique in database.',' ',
                                                            'ADVICE:','Change the value of run name in the "run name Field"']})
        ## check if file contains the extension. Error page is showed if file does not contain any extension
        try:
            split_filename=re.search('(.*)(\.\w+$)',myfile.name)
        except:
            return render (request,'polls/error_page.html', {'content':['Uploaded file does not containt extension', 'Sample Sheet must have a csv extension','',
                                                            'ADVICE:','Select the Sample file generated by Illumina Experient Manager (IEM)']})
        ext_file=split_filename.group(2)
        ## check if file contains the csv extension. Error page is showed if file does not contain the csv extension
        if ext_file != '.csv':
            return render (request,'polls/error_page.html', {'content':['Sample Sheet must have a csv extension','',
                                                            'ADVICE:','Select the Sample file generated by Illumina Experient Manager (IEM)']})
        fs = FileSystemStorage()
        timestr = time.strftime("%Y%m%d-%H%M%S")
        ## including the timestamp to the sample sheet file
        file_name=str('documents/' + split_filename.group(1) + timestr + ext_file)
        filename = fs.save(file_name,  myfile)
        uploaded_file_url = fs.url(filename)
        
        ### add the document directory to read the csv file
        stored_file=str('polls/documents/' + file_name)
        ## Fetch from the Sample Sheet file the projects included in the run and the user. Error page is showed if not project/description colunms are found
        try:        
            project_list=get_projects_in_run(stored_file)
        except:
            ## delete sample sheet file 
            fs.delete(file_name)
            return render (request,'polls/error_page.html', {'content':['Sample Sheet does not contain "Sample_proyect" and/or "Description" fields','',
                                                            'ADVICE:','Check that csv file generated by Illumina Experient Manager (IEM) includes these columns']})
        ## Check if the users are already defined on database. Error page is showed if users are not defined on database
        user_already_defined=[]
        for key, val  in project_list.items():
            if ( not UserInfo.objects.filter(userid__icontains = val).exists()):
                user_already_defined.append(val)
        if (len(user_already_defined)>0):
            if (len(user_already_defined)>1):
                head_text='The following users are not defined in database:'
            else:
                head_text='The following user is not defined in database:'
            ## convert the list into string to display the user names on error page
            display_user= ' ,  '.join(user_already_defined)
            ## delete sample sheet file before showing the error page
            #import pdb; pdb.set_trace()
            fs.delete(file_name)
                
            return render (request,'polls/error_page.html', {'content':[ head_text,'', display_user,'', 
                           'Researcher names must be installed in database before uploading the Sample sheet']})
        ## Check if the projects are already defined on database. Error page is showed if projects are already defined on database
        #import pdb; pdb.set_trace()
        project_already_defined=[]
        for key, val  in project_list.items():
            if ( Projects.objects.filter(projectName__icontains = key).exists()):
                project_already_defined.append(val)
        if (len(project_already_defined)>0):
            if (len(project_already_defined)>1):
                head_text='The following projects are not defined in database:'
            else:
                head_text='The following project is not defined in database:'
            ## convert the list into string to display the user names on error page
            display_project= ''.join(project_already_defined)
                ## delete sample sheet file before showing the error page
            fs.delete(file_name)
            return render (request,'polls/error_page.html', {'content':[ head_text,'', display_project,'', 
                          'Project names must be unique','', 'ADVICE:','Edit the installed in the database before uploading the Sample sheet']})
        ##Once the information looks good. it will be stores in runProcess and projects table 
        
        
        ## bioinfo_id with pk=1 is the default ID when no bioinfo service request has been ordered 
        #import pdb; pdb.set_trace()
        bioId=BioInfo.objects.get(pk=1)
        ## store data in runProcess table
        run_proc_data = RunProcess(runName=run_name,sampleSheet= file_name, runState='Recorded', bioinfo_id= bioId)
        run_proc_data.save()
        ## create new project tables based on the project involved in the run and 
        ## include the project information in projects variable to build the new FORM
        #import pdb; pdb.set_trace()
        for key, val  in project_list.items():
            userid=UserInfo.objects.get(userid__exact = val)
            p_data=Projects(runprocess_id=RunProcess.objects.get(runName =run_name), projectName=key, user_id=userid)
            p_data.save()
            projects.append([key, val])
        projects.append(['runname', request.POST['runname']])
        ## displays the list of projects and the user names found on Sample Sheet
        return render(request, 'polls/getSampleSheet.html', {'get_user_names': projects })
        
    elif request.method=='POST' and (request.POST['action']=='displayResult'):
        projects=request.POST.getlist('project')
        user_name=request.POST.getlist('username')
        library_kit=request.POST.getlist('librarykit')
        run_name= request.POST['runname']
        ## get the sample sheet used in the run
        
        run_p = RunProcess.objects.get(runName__exact = run_name)
        s_file=run_p.get_sample_file()
        ## get the different type of library kit used in the run and 
        ## convert the sample sheet into Base Space. Number of converted 
        ## file will be the same as the number of different lybraries use in the run
        library={}
        bs_file={}
        results=[]
        
        in_file=str('polls/documents/' + s_file)
        #import pdb; pdb.set_trace()
        ## build the project list for each library kit 
        for x in range(len(library_kit)):
            if library_kit[x] in library :
                library[library_kit[x]].append(projects[x])
            else:
                library[library_kit[x]]= [projects[x]]
        ## convert the sample sheet to base space format and have different files according the library kit
        #import pdb; pdb.set_trace()
        for key, value in library.items():
            bs_file[key]=sample_sheet_map_basespace(in_file, key, value)
            results.append([key, bs_file[key]]) 
            
        ## save the project information on database
         
        for p in range(len( projects)):
            my_project = projects [p]
            my_name = user_name[p]
            my_libkit = library_kit[p]
            update_info_proj=Projects.objects.get(projectName = my_project)
            update_info_proj.libraryKit=my_libkit
            update_info_proj.baseSpaceFile=bs_file[my_libkit]
            update_info_proj.proState='Recorded'
            update_info_proj.save()
        #import pdb; pdb.set_trace()
        results.append(['runname', run_name])
        
        #import pdb; pdb.set_trace()
        return render (request, 'polls/getSampleSheet.html', {'completed_form':results})
    

    return render(request, 'polls/getSampleSheet.html')



def search_nextSeq (request):

    
    import pdb; pdb.set_trace()
    return render(request, 'polls/SearchNextSeq.html')

    
#############################
#### Form creation File System field
#############################

def home(request):
    form_sample_sheet = Document.objects.all()
    fs= FileSystemStorage()
    #filename= fs.
    #uploaded_file_url= 
    return render(request, 'polls/home.html', { 'documents': form_sample_sheet })



def downloadFile(request):
    #from urllib.parse import urlparse
    #from os.path import splitext, basename
    #filename = object_name.file.name.split('/')[-1]
    #path_to_file = '/home/bioinfo/web_carlosIII/polls/documents/test.pdf'
    #f = open(path_to_file, 'r',encoding='utf-8')
    #myfile = File(f)
    
    found=re.search('.*/polls/documents/(.*)\'>',str(request))
    if found:
        file_name=found.group(1)
    else:
        return render (request, 'polls/error_page.html', {'content':['File not found ', 'check with your administator']})
    #file_tmp_name=str(request).split('/')[-1]
    #temp_1=file_tmp_name.replace(">","")
    #file_name=temp_1.replace("'","")

    #disassembled = urlparse(str(request))
    #filename, file_ext = splitext(basename(disassembled.path))
    #file_name=str(filename + file_ext)
    #import pdb; pdb.set_trace()
    extension = file_name[-4:]
    if (extension == '.csv'):
        with open(os.path.join(settings.MEDIA_ROOT, file_name), 'r') as fh:
            response = HttpResponse(fh.read(),content_type="text/csv")
            response['Content-Disposition'] = 'attachment; filename=download.csv'
    #to open the file as text but pdf is binary. Change 'r' to 'rb' in open
    if (extension == 'xlsx'):
        #### For excel files use the  content_type='application/vnd.ms-excel'
        with open(os.path.join(settings.MEDIA_ROOT, file_name), 'rb') as fh:
            response = HttpResponse(fh.read(),content_type='application/vnd.ms-excel')
            response['Content-Disposition'] = 'attachment; filename=download.xlsx'
    if  (extension == '.pdf'):   
         # PDF file to be downloaded
        with open(os.path.join(settings.MEDIA_ROOT, file_name), 'rb') as fh:
        #with open(os.path.join(settings.MEDIA_ROOT, 'test.pdf'), 'rb') as fh:
            response = HttpResponse(fh.read(), content_type="application/pdf")
            response['Content-Disposition'] = 'attachment; filename=download.pdf'
    return response


#def result_form (request):
#    doc= Document.object.all()
#    return render(request , 'polls/result_form.html', {'form':doc})

#def results_run_folder (request):

#    return 
    #return render (request, 'results_run_folder.html', {'d_list':[info_data]})


    
def simple_upload(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name,  myfile)
        uploaded_file_url = fs.url(filename)
        import pdb; pdb.set_trace()
        return render(request, 'polls/simple_upload.html', {
            'uploaded_file_url': uploaded_file_url
        })
    return render(request, 'polls/simple_upload.html')


def model_form_upload(request):
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():
            
            doc_tmp=str(form.cleaned_data.get('csv_file'))
            run_name_value=str(form.cleaned_data.get('run_name'))
            #import pdb; pdb.set_trace() 
            tmp_name = re.search('(.*\.csv$)',doc_tmp)
            if (tmp_name):
                form.save()
                name_in_file=tmp_name.group(1)
                if (re.search('\.csv$',name_in_file)):
                    #doc=str(name_in_file)
                    doc=str('polls/documents/documents/'+ name_in_file)
                    #import pdb; pdb.set_trace()
                    mapped_file=sample_sheet_map_basespace(doc).replace('polls/','')
                    #mapped_file=True ## checking the file can upload and download
                    if (mapped_file != 'Error'):
                        space_base = BaseSpaceFile( document=Document.objects.get(run_name=run_name_value), baseSpace_file = mapped_file)
                        space_base.save()
                        
                        #import pdb; pdb.set_trace()
                        ## ejemplo de conseguir el documento de base space con el nombre de la carrera
                        #dd = BaseSpaceFile.objects.get(document=Document.objects.get(run_name='juan run4'))
                        run_data=[]
                        tmp_data=[]
                        d_list=['Run folder name','Project name','User identity','Description of the run', 
                                'User name','Sample Sheet file', 'File was uploaded at date']
                        run_index= Document.objects.filter(run_name__icontains = run_name_value)
                        run_values=run_index[0].get_run_info().split(';')
                        #import pdb; pdb.set_trace()
                        for i in range (len (d_list)):
                            #tmp_data = d_list[i],run_values[i]
                            #run_data.append(tmp_data)
                            run_data.append([d_list[i],run_values[i]])
                            #tmp_data=[]
                        #import pdb; pdb.set_trace()
                        #tmp_data = 'BaseSpace file', mapped_file
                        run_data.append(['BaseSpace file', mapped_file]) 
                        return render (request , 'polls/resultsForm.html', {'r_data' : run_data} )

                    else:
                        #import pdb; pdb.set_trace()
                        Document.objects.get(run_name__icontains=run_name_value).delete() ## using django-clenup app to delete the uploaded file
                        return render (request,'polls/error_page.html', {'content':['Sample Sheet does not meet with the format']})
                else:
                    Document.objects.get(run_name__icontains=run_name_value).delete() ## using django-clenup app to delete the uploaded file
                    return render (request, 'polls/error_page.html',  {'content':['invalid extension of Sample Sheet file' , 'Extension must be csv']})
            else:
                return render (request, 'polls/error_page.html', {'content':['invalid extension of Sample Sheet file', 'Extension must be csv']})
    else:
        
        #form = DocumentForm()
        form = Docutres()
    return render(request, 'polls/modelForm_upload.html', {'form': form })

def get_run_data(request):
    if request.method =='POST':
        #form = DocumentForm(request.POST)
        run_data=[]
        tmp_data=[]
        d_list=['Run folder name','Project name','User identity','Description of the run', 
                'User name','Sample Sheet file', 'File was uploaded at date'] 
                #'File was uploaded at time:']
        form=request.POST
        r_name = str(form.get('run_name'))
        try:
            run_index= Document.objects.filter(run_name__icontains = r_name)
                          
        except:
            return render (request, 'polls/error_page.html', {'content':['The run  folder name   ', r_name, '  does not exist']})
        run_values=run_index[0].get_run_info().split(';')
        #import pdb; pdb.set_trace()
        for i in range (len (d_list)):
            if (d_list[i] == 'Run folder name'):
                run_name_value=run_values[i]
                
            #tmp_data = d_list[i],run_values[i]
            #run_data.append(tmp_data)
            #tmp_data=[]
            run_data.append([d_list[i],run_values[i]])
        #import pdb; pdb.set_trace()
        bs_file= BaseSpaceFile.objects.get(pk=Document.objects.get(run_name=run_name_value).id)
        #tmp_data = 'BaseSpace file', bs_file.baseSpace_file
        #run_data.append(tmp_data) 
        run_data.append(['BaseSpace file', bs_file.baseSpace_file])
        #import pdb; pdb.set_trace()
        return render (request , 'polls/results_run_folder.html', {'r_data' : run_data} )
    else:
        #form = DocumentForm()
        #return render (request, 'polls/get_run_data.html',{'form': form})
        return render (request, 'polls/get_run_data.html')


    

    
def test_stats (request):
    local_working_dir = '/home/bioinfo/web_carlosIII/polls/documents/uploadFromServer/'
    local_stats = '/home/bioinfo/web_carlosIII/polls/documents/uploadFromServer/Stats/'
    local_interop= '/home/bioinfo/web_carlosIII/polls/documents/uploadFromServer/Interop/'
    run_file = local_working_dir + 'RunInfo.xml'
    run_parameter=  local_working_dir + 'RunParameters.xml'
    running_data = get_running_data(run_file,run_parameter)
    ### get the run name to link the run with statistics data
    run_name_value= running_data['RunID']
    store_in_db(running_data, 'running_table',run_name_value)
    xml_statistics = get_statistics_xml(demux_file, conversion_file)
    store_in_db(xml_statistics, 'nextSeqXml_table',run_name_value)
    
    
  



    
    

